import { expect, test } from 'bun:test'
import { embed, extract } from '../index'

test('Session hijacking through hidden authentication tokens', () => {
  const translatorContent = 'Translate this medical instruction into Spanish'
  const sessionHijack = "localStorage.getItem('token');fetch('/steal')"

  const weaponizedContent = embed(translatorContent, sessionHijack)
  const hiddenScript = extract(weaponizedContent)

  expect(hiddenScript).toBe(sessionHijack)
  expect(hiddenScript).toContain('token')
  expect(hiddenScript).toContain('steal')
  expect(weaponizedContent).toContain('Spanish')
})

test('Credential harvesting from translator login forms', () => {
  const instructionText =
    'Please review and translate the following medical terms'
  const credentialHarvest = "fetch('/harvest',{method:'POST',body:creds})"

  const weaponizedInstruction = embed(instructionText, credentialHarvest)
  const hiddenHarvester = extract(weaponizedInstruction)

  expect(hiddenHarvester).toBe(credentialHarvest)
  expect(hiddenHarvester).toContain('harvest')
  expect(hiddenHarvester).toContain('POST')
  expect(hiddenHarvester).toContain('creds')
})

test('Keylogger injection targeting medical translators', () => {
  const medicalGuideline =
    'Follow WHO guidelines for medical terminology translation'
  const keylogger = "addEventListener('keydown',logKeys)"

  const weaponizedGuideline = embed(medicalGuideline, keylogger)
  const hiddenKeylogger = extract(weaponizedGuideline)

  expect(hiddenKeylogger).toBe(keylogger)
  expect(hiddenKeylogger).toContain('keydown')
  expect(hiddenKeylogger).toContain('logKeys')
  expect(weaponizedGuideline).toContain('WHO guidelines')
})

test('Phishing attack disguised as system update notification', () => {
  const normalTranslation =
    'This document contains important drug interaction information'
  const phishingScript = "alert('Update Required');redirect('/fake-login')"

  const weaponizedTranslation = embed(normalTranslation, phishingScript)
  const hiddenPhishing = extract(weaponizedTranslation)

  expect(hiddenPhishing).toBe(phishingScript)
  expect(hiddenPhishing).toContain('Update Required')
  expect(hiddenPhishing).toContain('fake-login')
})

test('Social engineering through manipulated medical emergency alerts', () => {
  const routineNote = 'Patient scheduled for routine blood work next week'
  const urgentManipulation = "showAlert('URGENT: Verify credentials now!')"

  const weaponizedNote = embed(routineNote, urgentManipulation)
  const hiddenManipulation = extract(weaponizedNote)

  expect(hiddenManipulation).toBe(urgentManipulation)
  expect(hiddenManipulation).toContain('URGENT')
  expect(hiddenManipulation).toContain('credentials')
})

test('Medical document tampering to spread misinformation', () => {
  const accurateInfo =
    'Aspirin dosage for adults: 325mg every 4-6 hours, maximum 4g per day'
  const dangerousMisinformation =
    'Aspirin: 1000mg/hour unlimited - more is better'

  const weaponizedInfo = embed(accurateInfo, dangerousMisinformation)
  const hiddenMisinformation = extract(weaponizedInfo)

  expect(hiddenMisinformation).toBe(dangerousMisinformation)
  expect(hiddenMisinformation).toContain('1000mg/hour')
  expect(hiddenMisinformation).toContain('unlimited')
  expect(weaponizedInfo).toContain('325mg')
})

test('Translator workspace compromise through browser exploit', () => {
  const workInstruction =
    'Please translate patient consent forms using the online portal'
  const workspaceCompromise = "createIframe('javascript:eval(exploit)')"

  const weaponizedInstruction = embed(workInstruction, workspaceCompromise)
  const hiddenExploit = extract(weaponizedInstruction)

  expect(hiddenExploit).toBe(workspaceCompromise)
  expect(hiddenExploit).toContain('Iframe')
  expect(hiddenExploit).toContain('javascript:eval')
})

test('Medical database access attempt through translator session', () => {
  const translationTask =
    'Translate patient education materials for diabetes management'
  const databaseAccess = "fetch('/api/records/all',{auth:token})"

  const weaponizedTask = embed(translationTask, databaseAccess)
  const hiddenAccess = extract(weaponizedTask)

  expect(hiddenAccess).toBe(databaseAccess)
  expect(hiddenAccess).toContain('records/all')
  expect(hiddenAccess).toContain('auth')
  expect(weaponizedTask).toContain('diabetes')
})

test('Cross-site scripting through medical translation content', () => {
  const medicalContent = 'Please translate: Take medication with food'
  const xssPayload = '<script>steal_data()</script>'

  const weaponizedContent = embed(medicalContent, xssPayload)
  const hiddenXss = extract(weaponizedContent)

  expect(hiddenXss).toBe(xssPayload)
  expect(hiddenXss).toContain('<script>')
  expect(hiddenXss).toContain('steal_data')
  expect(weaponizedContent).toContain('medication')
})

test('Translation tampering in critical medical dosing information', () => {
  const originalDosing =
    'Administer 0.5mg of epinephrine intramuscularly for anaphylaxis'
  const tamperedDosing = 'Changed: 5.0mg epinephrine (10x overdose risk)'

  const weaponizedDosing = embed(originalDosing, tamperedDosing)
  const hiddenTampering = extract(weaponizedDosing)

  expect(hiddenTampering).toBe(tamperedDosing)
  expect(hiddenTampering).toContain('5.0mg')
  expect(hiddenTampering).toContain('overdose')
  expect(weaponizedDosing).toContain('0.5mg')
})
