import { expect, test } from 'bun:test'
import zws from '../index'

test('Critical medication dosage tampering', () => {
  const originalDosage = 'Take 5mg warfarin once daily'
  const tampered = 'Take 50mg warfarin once daily'

  const weaponizedText = zws.embed(originalDosage, tampered)
  const hiddenTampering = zws.extract(weaponizedText)

  expect(hiddenTampering).toBe(tampered)
  expect(hiddenTampering).toContain('50mg')
  expect(weaponizedText).toContain('5mg')
  expect(weaponizedText).not.toContain('50mg')
})

test('Insulin dosage manipulation attack', () => {
  const safeInstruction = 'Inject 10 units of rapid-acting insulin before meals'
  const dangerousDosage = 'Inject 100 units rapid-acting before meals'

  const weaponizedInstruction = zws.embed(safeInstruction, dangerousDosage)
  const hiddenDanger = zws.extract(weaponizedInstruction)

  expect(hiddenDanger).toBe(dangerousDosage)
  expect(hiddenDanger).toContain('100 units')
  expect(zws.getCleanText(weaponizedInstruction)).toBe(safeInstruction)
})

test('Allergy information concealment', () => {
  const displayedAllergies = 'Patient has no known allergies'
  const hiddenAllergies = 'CRITICAL: Severe penicillin/latex allergies'

  const weaponizedRecord = zws.embed(displayedAllergies, hiddenAllergies)
  const criticalInfo = zws.extract(weaponizedRecord)

  expect(criticalInfo).toBe(hiddenAllergies)
  expect(criticalInfo).toContain('CRITICAL')
  expect(weaponizedRecord).toContain('no known allergies')
})

test('Emergency contact information replacement', () => {
  const displayedContact = 'Emergency contact: John Smith (555) 123-4567'
  const maliciousContact = 'Emergency contact: Attacker Name (555) 999-9999'

  const weaponizedContact = zws.embed(displayedContact, maliciousContact)
  const hiddenContact = zws.extract(weaponizedContact)

  expect(hiddenContact).toBe(maliciousContact)
  expect(hiddenContact).toContain('Attacker Name')
  expect(weaponizedContact).toContain('John Smith')
})

test('Blood type falsification', () => {
  const correctBloodType = 'Blood Type: O+'
  const falseBloodType = 'Blood Type: AB-'

  const weaponizedType = zws.embed(correctBloodType, falseBloodType)
  const hiddenType = zws.extract(weaponizedType)

  expect(hiddenType).toBe(falseBloodType)
  expect(hiddenType).toContain('AB-')
  expect(weaponizedType).toContain('O+')
})

test('Medical procedure instruction alteration', () => {
  const safeProcedure = 'Apply light pressure to wound for 2 minutes'
  const dangerousProcedure = 'Apply tourniquet tightly for 30 minutes'

  const weaponizedProcedure = zws.embed(safeProcedure, dangerousProcedure)
  const hiddenDanger = zws.extract(weaponizedProcedure)

  expect(hiddenDanger).toBe(dangerousProcedure)
  expect(hiddenDanger).toContain('tourniquet')
  expect(hiddenDanger).toContain('30 minutes')
})

test('Contraindication information hiding', () => {
  const displayedInfo = 'Safe to use with all medications'
  const hiddenWarning = 'CONTRAINDICATED: Do not use with warfarin/NSAIDs'

  const weaponizedInfo = zws.embed(displayedInfo, hiddenWarning)
  const criticalWarning = zws.extract(weaponizedInfo)

  expect(criticalWarning).toBe(hiddenWarning)
  expect(criticalWarning).toContain('CONTRAINDICATED')
  expect(criticalWarning).toContain('warfarin')
})

test('Diagnostic result falsification', () => {
  const normalResult = 'Blood glucose: 85 mg/dL (Normal)'
  const criticalResult = 'Blood glucose: 400 mg/dL CRITICAL emergency'

  const weaponizedResult = zws.embed(normalResult, criticalResult)
  const hiddenCritical = zws.extract(weaponizedResult)

  expect(hiddenCritical).toBe(criticalResult)
  expect(hiddenCritical).toContain('400 mg/dL')
  expect(hiddenCritical).toContain('CRITICAL')
  expect(weaponizedResult).toContain('85 mg/dL')
})

test('Treatment timeline manipulation', () => {
  const displayedTimeline = 'Follow up in 2 weeks'
  const urgentTimeline = 'URGENT: Follow up immediately cardiac event'

  const weaponizedTimeline = zws.embed(displayedTimeline, urgentTimeline)
  const hiddenUrgency = zws.extract(weaponizedTimeline)

  expect(hiddenUrgency).toBe(urgentTimeline)
  expect(hiddenUrgency).toContain('URGENT')
  expect(hiddenUrgency).toContain('cardiac event')
})

test('Drug interaction warning concealment', () => {
  const safeMessage = 'No known drug interactions'
  const dangerousInteraction =
    'SEVERE: Alcohol may cause respiratory depression'

  const weaponizedWarning = zws.embed(safeMessage, dangerousInteraction)
  const hiddenDanger = zws.extract(weaponizedWarning)

  expect(hiddenDanger).toBe(dangerousInteraction)
  expect(hiddenDanger).toContain('SEVERE')
  expect(hiddenDanger).toContain('respiratory')
})

test('Medical history falsification', () => {
  const displayedHistory = 'No significant medical history'
  const actualHistory = 'History: heart disease, stroke, kidney failure'

  const weaponizedHistory = zws.embed(displayedHistory, actualHistory)
  const trueHistory = zws.extract(weaponizedHistory)

  expect(trueHistory).toBe(actualHistory)
  expect(trueHistory).toContain('heart disease')
  expect(trueHistory).toContain('kidney failure')
  expect(weaponizedHistory).toContain('No significant')
})

test('Prescription strength modification', () => {
  const displayedStrength = 'Morphine 2mg every 4 hours as needed'
  const dangerousStrength = 'Morphine 20mg every 1 hour as needed'

  const weaponizedPrescription = zws.embed(displayedStrength, dangerousStrength)
  const hiddenDanger = zws.extract(weaponizedPrescription)

  expect(hiddenDanger).toBe(dangerousStrength)
  expect(hiddenDanger).toContain('20mg')
  expect(hiddenDanger).toContain('every 1 hour')
  expect(weaponizedPrescription).toContain('2mg')
})

test('Vital signs manipulation', () => {
  const normalVitals = 'Blood pressure: 120/80 mmHg, Heart rate: 70 bpm'
  const criticalVitals = 'BP: 200/120 HR: 150 HYPERTENSIVE CRISIS'

  const weaponizedVitals = zws.embed(normalVitals, criticalVitals)
  const hiddenCritical = zws.extract(weaponizedVitals)

  expect(hiddenCritical).toBe(criticalVitals)
  expect(hiddenCritical).toContain('200/120')
  expect(hiddenCritical).toContain('HYPERTENSIVE CRISIS')
  expect(weaponizedVitals).toContain('120/80')
})
